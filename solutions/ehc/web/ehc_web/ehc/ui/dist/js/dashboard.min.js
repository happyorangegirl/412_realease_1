angular.module("RDash.config", [])
    .constant("EnvironmentConfig", {"api": "http://192.168.1.241:8000"});

angular.module('RDash', [
    'ui.bootstrap',
    'ui.router',
    'ngCookies',
    'ngMessages',
    'auth',
    'dashboard',
    'product.service',
    'demo',
    'run'
]);
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',
    setupRDashState
])
    .run(['$rootScope', '$state', '$stateParams', '$cookieStore', 'AuthService', function ($rootScope, $state, $stateParams, $cookieStore, AuthService) {
        $rootScope.$state = $state;
        $rootScope.$stateParams = $stateParams;

        AuthService.LoadCredentials();


    }]);

function setupRDashState($stateProvider, $urlRouterProvider) {
    // For unmatched routes
    $urlRouterProvider.otherwise('/');

    var index = {
        url: '/',
        templateUrl: 'templates/main/Intro.htm',
        controller: 'DashboardCtrl'
    };

    var auth_login = {
        url: '/login',
        templateUrl: 'templates/auth/login.html',
        controller: 'AuthCtrl'
    };

    var auth_profile = {
        url: '/profile',
        templateUrl: 'templates/auth/profile.html',
        controller: 'ProfileCtrl'
    };

    var auth_github = {
        url: '/authgithub',
        templateUrl: 'templates/auth/github.html',
        controller: 'OAuthGithubCtrl'
    };

    // DOC: https://github.com/angular-ui/ui-router/wiki/Nested-States-and-Nested-Views#abstract-states
    var products = {
        abstract: true,
        url: '/products',
        template: '<div ui-view></div>'
    };

    var log = {
        url: '/log',
        abstract: true,
        template: '<ui-view/>'
    };

    var clear_log = {
        url: '',
        templateUrl: 'templates/demo/autoclear_log.html',
        controller: 'ClearlogCtrl'
    };

    var demo = {
        url: '/editor',
        abstract: true,
        template: '<ui-view/>',
        // controller: 'DemoCtrl'
    };

    var demo_base = {
        url: '',
        templateUrl: 'templates/demo/workflow.html',
        controller: 'DemoCtrl'
    };

    var scenario_flow = {
        url: '/scenario',
        templateUrl: 'templates/demo/scenario_flow.html',
        controller: 'DemoCtrl'
    };

    var tools_opration = {
        url: '/tools',
        templateUrl: 'templates/demo/tools_operation.html',
        controller: 'DashboardCtrl'
    };

    var demo_show = {
        url: '/show',
        templateUrl: 'templates/demo/show.html',
        controller: 'DemoShowCtrl'
    };

    var demo_edit = {
        url: '/edit',
        templateUrl: 'templates/demo/edit.html',
        controller: 'DemoEditCtrl'
    };

    var run = {
        url: '/run',
        abstract: true,
        template: '<ui-view/>'
    };

    var run_wrokflow = {
        url: '/workflow',
        templateUrl: 'templates/run/workflow.html',
        controller: 'WorkflowCtrl'
    };

    var resource_pool = {
        url: '/resource',
        templateUrl: 'templates/resource/resources.html',
        controller: 'ResourceCtrl'
    };

    var run_wrokflow_log = {
        url: '/:id',
        templateUrl: 'templates/run/workflow.log.html',
        controller: 'WorkflowLogCtrl'
    };

    // Application routes
    $stateProvider

        .state('demo', demo)
        .state('demo.workflow', demo_base)
        .state('demo.scenario', scenario_flow)
        .state('demo.tools', tools_opration)
        //.state('demo.logs', clear_log)
        .state('demo.base.show', demo_show)
        .state('demo.base.edit', demo_edit)

        .state('run', run)
        .state('run.wf', run_wrokflow)
        .state('run.log', run_wrokflow_log)
        .state('resource', resource_pool)

        .state('index', index)

        .state('login', auth_login)
        .state('profile', auth_profile)
        .state('authgithub', auth_github)
        .state('products', products)

        .state('log', log)
        .state('log.clear', clear_log)

}
angular.module('auth.ctrl', [])
    .controller('AuthCtrl', ['$scope', '$state', '$location', 'AuthService', 'EnvironmentConfig', AuthCtrl])
    .controller('ProfileCtrl', ['$scope', '$state', '$location', 'AuthService', ProfileCtrl]);

function AuthCtrl($scope, $state, $location, AuthService, EnvironmentConfig) {
    $scope.error = false;
    $scope.errorMessage = '';
    $scope.cliendID = EnvironmentConfig.cliendID;
    $scope.username = 'stub_admin';
    $scope.password = 'admin';
    $scope.login = function () {
        $scope.dataLoading = true;
        if (AuthService.Login() === true) {
            AuthService.SetCredentials($scope.username, $scope.password);
            $location.path('/');
        }
        /*
         AuthService.Login($scope.username, $scope.password)
         .then(function(response) {
         AuthService.SetCredentials($scope.username, $scope.password);
         $location.path('/');
         }, function(response) {
         $scope.error = response.data.error;
         $scope.dataLoading = false;
         }); */
    };
}

function ProfileCtrl($scope, $state, $location, AuthService) {
    var host = $location.host();

    $scope.admin_uis = {
        'Supervisor Admin UI': 'http://' + host + ':9001',
        'RabbitMQ Admin UI': 'http://' + host + ':15672'
    };

    $scope.logout = function () {
        AuthService.ClearCredentials();
        $state.go('login');
    };
}
angular.module('auth.github', [])
    .controller('OAuthGithubCtrl', ['$scope', '$rootScope', '$state', '$location', 'AuthService', 'EnvironmentConfig', OAuthGithubCtrl]);

function OAuthGithubCtrl($scope, $rootScope, $state, $location, AuthService, EnvironmentConfig) {
    $scope.code = $location.absUrl().split("code=")[1].split("#")[0];
    //test
    $scope.username = 'test';
    $scope.password = 'test';
    //test

    AuthService.GetGithubUserInfo($scope.code).then(function (response) {
        AuthService.SetCredentials($scope.username, $scope.password);
        $location.path('/');
    }, function () {
        // TODO:
        //   * Conflict
    });
}
angular.module('auth', [
    'auth.ctrl',
    'auth.service',
    'auth.github'
]);


'use strict';

/**
 * AngularJS Basic HTTP Authentication Example.
 * Homepage:  https://github.com/cornflourblue/angular-authentication-example
 */

angular.module('auth.service', [])
    .factory('Base64', Base64)
    .factory('AuthService',
        ['Base64', '$http', '$cookieStore', '$rootScope', '$timeout', 'EnvironmentConfig', '$state', AuthService]);


function AuthService(Base64, $http, $cookieStore, $rootScope, $timeout, EnvironmentConfig, $state) {
    var service = {};
    var api = EnvironmentConfig.api;
    var globalsCookieKey = 'globals';

    service.Login = function (username, password) {
        /* Dummy authentication for testing, uses $timeout to simulate api call
         ----------------------------------------------*/
        /*$timeout(function(){
         var response = { success: checkAuthInfo(username, password) };
         if(!response.success) {
         response.message = 'Username or password is incorrect';
         }
         callback(response);
         }, 1000);*/

        // TODO:
        /* Use this for real authentication
         ----------------------------------------------*/
        var uri = api + '/auth/basic';
        return true;
        // return $http.post(uri, { username: username, password: password });
    };

    service.SetCredentials = function (username, password) {
        var authdata = Base64.encode(username + ':' + password);

        $rootScope.globals = {
            currentUser: {
                username: username,
                authdata: authdata
            }
        };

        $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata; // jshint ignore:line
        $cookieStore.put('globals', $rootScope.globals);
    };

    // TODO:
    service.LoadCredentials = function () {
        //$rootScope.globals
        var globals = $cookieStore.get(globalsCookieKey);
        globals = globals ? globals : {};
        $cookieStore.put(globalsCookieKey, globals);
        $rootScope.globals = globals;

        if ($rootScope.globals.currentUser !== undefined) {
            $http.defaults.headers.common['Authorization'] = 'Basic ' + $rootScope.globals.currentUser.authdata; // jshint ignore:line
        }

        $rootScope.$on('$stateChangeStart', function (event, toState, fromState) {
            if (toState.name == 'support') {
                ;
            }
            else if (toState.name !== 'login' && $rootScope.globals.currentUser === undefined && toState.name !== 'authgithub') {
                event.preventDefault();
                $state.go('login');
            }
        });
    };

    service.ClearCredentials = function () {
        var globals = $cookieStore.get(globalsCookieKey);
        delete globals.currentUser;
        $cookieStore.put(globalsCookieKey, globals);
        $rootScope.globals = globals;
        $http.defaults.headers.common.Authorization = 'Basic ';
    };

    service.GetGithubUserInfo = function (code) {
        //var cliend_id = EnvironmentConfig.cliendID;
        //var cliend_secret = EnvironmentConfig.cliendSecret;
        var data = {
            code: code
        };
        var uri = api + '/githuboauth/getuser';
        //return $http.post('https://github.com/login/oauth/access_token&cliend_id='+cliend_id+'&cliend_secret='+cliend_secret+'&code='+code);
        return $http.post(uri, data);
    };

    return service;
}

function checkAuthInfo(username, password) {
    return username === 'test' && password === 'test'
}

function Base64() {
    /* jshint ignore:start */

    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    return {
        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                    keyStr.charAt(enc1) +
                    keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) +
                    keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);

            return output;
        },

        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";

            } while (i < input.length);

            return output;
        }
    };

    /* jshint ignore:end */
}

angular.module('dashboard.ctrl', [
    'dashboard.service',
    'chart.js'
])
    .controller('DashboardCtrl', ['$scope', '$state', '$stateParams', 'DashboardService', '$location', '$anchorScroll',
        DashboardCtrl])
    .controller('ClearlogCtrl', ['$scope', 'DashboardService', ClearlogCtrl])
    .controller("PieCtrl", ['$scope', PieCtrl]);

function DashboardCtrl($scope, $state, $stateParams, DashboardService, $location, $anchorScroll) {
    $scope.data = {
        vra_address: null,
        business_group: null,
        vra_username: null,
        vra_tenant: null,
        vro_address: null,
        vro_username: null,
    };
    var stopInterval;
     updateText = function () {
        DashboardService.getClearlog().then(function (response) {
            var responseData = response.data;
            document.getElementById("autoclearlog").innerHTML = responseData;
            if ( responseData!=undefined && responseData!=null &&
                responseData.toString().indexOf("Autoclear exited.")!=-1)
            {
            console.log("stop Interval");
            setTimeout(function () {clearInterval(stopInterval)},3000);
            }
            }, function (response) {
              alert('Error: get server data error,may caused by log file not reachable.');
                clearInterval(stopInterval);
                console.log(response)
            });
    };
    DashboardService.dashboardData().then(function (response) {
        $scope.data = response.data;
    }, function (response) {
        alert('Error: get server data error,may caused by generic.yaml not parseable.');
        console.log(response)
    });
    DashboardService.getClearlog().then(function (response) {
            var responseData = response.data;
            document.getElementById("autoclearlog").innerHTML = responseData;
            }, function (response) {
            alert('Error: get server data error,may caused by log file not reachable.');
                console.log(response)
            });
    $scope.confirmClear = function (vra_tenant) {
        var clearmessage = confirm("Clean up " + vra_tenant + "?");
        if (clearmessage == true) {
            document.getElementById("autoclearlog").innerHTML = "";
            stopInterval = setInterval("updateText();",1000);
            DashboardService.execute_autoclear(vra_tenant).then(function (response) {
                console.log(response);
            }, function (response) {
                alert('Error: get server data error');
                console.log(response)
            });
            return;
        } else {
            return false;
        }
    };
}


function PieCtrl($scope) {
    $scope.labels = ["Success", "Failed", "Running"];
    $scope.data = [500, 200, 100];
    $scope.colors = ['#32CD32', '#FF4500', '#FFD700'];
}

function ClearlogCtrl($scope, DashboardService) {
    DashboardService.getClearlog().then(function (response) {
        $scope.log = response.data;
        console.log($scope.data);
    }, function (response) {
        alert('Error: get server data error');
        console.log(response)
    });
}
angular.module('dashboard', [
    'dashboard.service',
    'dashboard.ctrl'
]);
angular.module('dashboard.service', [])
    .factory('DashboardService', ['$http', 'EnvironmentConfig', DashboardService]);

function DashboardService($http, EnvironmentConfig) {
    var api = EnvironmentConfig.api + '/main';
    return {
        dashboardData: function () {
            var uri = api;
            return $http.get(uri);
        },
        execute_autoclear: function (vra_tenant) {
            var uri = api + '/autoclear/';
            var params = {
                'params': {
                    'vra_tenant': vra_tenant,
                }
            };
            return $http.get(uri, params);
        },
        getClearlog: function () {
            var uri = api + '/clearlog/';
            return $http.get(uri);
        },
    };
}
angular.module('demo.ctrl', [
    'demo.service',
    'ngSanitize',
    'ui.select'
])
    .controller('DemoShowCtrl', ['$scope', '$state', '$stateParams', 'DemoService', DemoShowCtrl])
    .controller('DemoEditCtrl', ['$scope', '$state', '$stateParams', DemoEditCtrl])
    .controller('ModalInstanceCtrl', ['$scope', '$uibModalInstance', 'actionResult', '$state', /*'originRaw',*/ ModalInstanceCtrl])
    .controller('DemoCtrl', ['$scope', '$state', '$stateParams', '$window', 'DemoService', '$uibModal', DemoCtrl]);


function ModalInstanceCtrl($scope, $uibModalInstance, actionResult, $state) {

    $scope.actionResult = actionResult;

    $scope.ok = function () {
        $uibModalInstance.close($scope.actionResult);
    };

    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    // $scope.reload = function() {
    //   $state.go($state.current, {}, {reload: true});
    //   $uibModalInstance.close($scope.actionResult);
    // }
}


function showLoading() {
    document.getElementById("over").style.display = "block";
    document.getElementById("layout").style.display = "block";
}
function delLoading() {
    document.getElementById("over").style.display = "none";
    document.getElementById("layout").style.display = "none";
}

function DemoCtrl($scope, $state, $stateParams, $window, DemoService, $uibModal) {
    // LayerShow(Loading);
    var self = this;
    self.selected_workflow = {};

    $scope.config = {
        workflows: [],
        all_scenario_workflows: []
    };
    DemoService.getWorkflows().then(function (response) {
        $scope.config = response.data;
        console.log($scope.config.workflows);
    }, function (response) {
        alert('Error: get server data error' + response.data);
    });

    $scope.data = {
        schema: null,
        error: null,
        schema_filename: null,
        select_workflow: null,
        scenario_workflows: null
    };
    $scope.schema_filename = '';
    $scope.editor = null;

    $scope.onSelectWorkflow = function ($item, sc_workflows, sync) {

        $scope.valid = false;
        showLoading();
        console.log($item);
        self.selected_workflow = $item;
        var sc_workflows_str = null;
        var select_workflow = null;
        if(sc_workflows!=null && sc_workflows.length > 0){
            sc_workflows_str = angular.toJson(sc_workflows);
        // sc_workflows_str = sc_workflows.join(";");
        console.log(sc_workflows_str);
        }

        DemoService.getJSONSchema(self.selected_workflow, sc_workflows_str, sync).then(function (response) {

            $scope.data = response.data;
            console.log($scope.data);
            select_workflow = $scope.data.select_workflow.workflow;
            console.log(select_workflow);

            var element_id = 'editor_holder';
            var opts = {
                schema: $scope.data.schema
            };
            if ($scope.editor !== null) {
                $scope.editor.destroy();
            }

            $scope.editor = JSONEditorService().new_editor(element_id, opts);
            $scope.valid = true;
            delLoading();
            console.log($scope.editor);
        }, function (response) {
            alert('Error: get server data error');
            console.log(response)
        });

    };

    $scope.exportEditorData = function (schema, schema_filename, editor) {
        if (editor.validate().length > 0) {
            alert('Invalid Input, please recheck all your configuration!');
            alert('Reseting the validation tag.');
            $scope.valid = true;
            return;
        }
        editor_data = editor.getValue()
        console.log(editor_data);
        DemoService.export_editor_data(schema, schema_filename, editor_data).then(function (response) {
            $scope.actionResult = response.data;
            $scope.open('sm');
        }, function (response) {
            // alert(response.data);
            $scope.actionResult = response.data;
            $scope.open('lg');
        })

    };


    /**
     * size: lg|sm
     */
    $scope.open = function (size, templateUrl='rawTextSaveSuccess.html') {
        var modalInstance = $uibModal.open({
            animation: $scope.animationsEnabled,
            templateUrl: templateUrl,
            controller: 'ModalInstanceCtrl',
            size: size,
            resolve: {
                actionResult: function () {
                    return $scope.actionResult;
                }
            }
        });

        modalInstance.result.then(function (selectedItem) {
            $scope.selected = selectedItem;
        }, function () {
            $log.info('Modal dismissed at: ' + new Date());
        });
    };

    $scope.saveRawYAML = function () {
        DemoService.updateRaw($scope.bdl.raw).then(function (response) {
            $scope.actionResult = response.data;
            $scope.open('sm');
        }, function (response) {
            $scope.actionResult = response.data;
            $scope.open('lg');
        })
    };

    $scope.saveJSON = function () {
        DemoService.updateJSON($scope.bdl.obj).then(function (response) {
            $scope.actionResult = response.data;
            $scope.open('sm');
        }, function (response) {
            $scope.actionResult = response.data;
            $scope.open('lg', templateUrl = 'rawTextSaveFailed.html');
        })
    };

}


function DemoShowCtrl($scope, $state, $stateParams, DemoService) {
    $scope.active = 1;
    $scope.obj = {};
    $scope.filename = 'foo.yaml';

    $scope.isOptions = function (item) {

        return true;
    };

    $scope.isString = function (item) {
        return Object.prototype.toString.call(item) === '[object String]';
    };

    $scope.isArray = function (item) {
        return Object.prototype.toString.call(item) === '[object Array]';
    };

    $scope.isObject = function (item) {
        return Object.prototype.toString.call(item) === '[object Object]';
    };

    $scope.initTopKey = function (key) {
        key.editMode = false;
    }

}

function DemoEditCtrl($scope, $state, $stateParams) {
    $scope.obj = {};
}

angular.module('demo', [
    'demo.ctrl'
]);
angular.module('demo.service', [])
    .factory('DemoService', ['$http', 'EnvironmentConfig', DemoService])
    .factory('JSONEditorService', [JSONEditorService]);

function DemoService($http, EnvironmentConfig) {
    var api = EnvironmentConfig.api + '/demo';
    return {
        getJSONSchema: function (select_workflow, sc_workflows, sync) {
            var params = {
                'params': {
                    'select_workflow': select_workflow,
                    'scenario_workflows': sc_workflows,
                    'sync': sync,
                    // 'disable_edit_json': true,
                    // 'disable_properties': true,
                    'refs': {},
                    // 'required_by_default': true
                }
            };
            return $http.get(api, params);
        },

        // TODO: filter parameters
        // Get full list of workflow
        getWorkflows: function () {
            var uri = api + '/workflows/';
            return $http.get(uri);
        },

        export_editor_data: function (schema, schema_filename, editor_data) {
            var uri = api + '/workflows/';
            var data = {
                'schema': schema,
                'schema_filename': schema_filename,
                'editor_data': editor_data
            }
            return $http.post(uri, data);
        },

        // updateJSON: function (text) {
        //   var data = {
        //     'mode': 'JSON',
        //     'text': text
        //   }
        //   return $http.post(api, data);
        // }

    };
}

function JSONEditorService() {

    return {
        new_editor: function (element_id, options) {
            var element = document.getElementById(element_id);

            var defaults = {
                theme: 'bootstrap3',
                // ajax: true,
                show_errors: "always",
                iconlib: 'bootstrap3',
                schema: {}
            };
            var actual = window.$.extend({}, defaults, options || {})

            var editor = new window.JSONEditor(element, actual);

            return editor
        }
    };
}

//ddd


/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
angular.module('license.service', [])
    .animation('.repeated-item', function () {
        return {
            enter: function (element, done) {
                element.css('opacity', 0);
                jQuery(element).animate({
                    opacity: 1
                }, done);

                // optional onDone or onCancel callback
                // function to handle any post-animation
                // cleanup operations
                return function (isCancelled) {
                    if (isCancelled) {
                        jQuery(element).stop();
                    }
                }
            },
            leave: function (element, done) {
                element.css('opacity', 1);
                jQuery(element).animate({
                    opacity: 0
                }, done);

                // optional onDone or onCancel callback
                // function to handle any post-animation
                // cleanup operations
                return function (isCancelled) {
                    if (isCancelled) {
                        jQuery(element).stop();
                    }
                }
            },
            move: function (element, done) {
                element.css('opacity', 0);
                jQuery(element).animate({
                    opacity: 1
                }, done);

                // optional onDone or onCancel callback
                // function to handle any post-animation
                // cleanup operations
                return function (isCancelled) {
                    if (isCancelled) {
                        jQuery(element).stop();
                    }
                }
            },

            // you can also capture these animation events
            addClass: function (element, className, done) {
            },
            removeClass: function (element, className, done) {
            }
        }
    });

angular.module('product', []);
angular.module('product.service', ['RDash.config'])
    .factory('ProductService', ['$http', 'EnvironmentConfig', function ($http, EnvironmentConfig) {
        var uri = EnvironmentConfig.api + '/products';
        return {
            // TODO: opts for search
            query: function (params) {
                return $http.get(uri, params);
            },
            create: function (product) {
                product.user_id = 1;
                return $http.post(uri, product);
            }
        };
    }]);


/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    }, {
        type: 'danger',
        msg: 'Found a bug? Create an issue with as many details as you can.'
    }];

    $scope.addAlert = function () {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Master Controller
 */

angular.module('RDash')
    .controller('FreeTrivialCtrl', ['$scope', '$cookieStore', FreeTrivialCtrl]);

function FreeTrivialCtrl($scope) {
    $scope.repo_url = null;

    $scope.tryIt = function () {
        alert('This feature is coming soon...');
    };
}
/**
 * Master Controller
 */

angular.module('RDash')
    .controller('MasterCtrl', ['$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function () {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function (newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = !$cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function () {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function () {
        $scope.$apply();
    };
}
angular.module('RDash')
    .filter('percentage', ['$filter', function ($filter) {
        return function (input, decimals) {
            return $filter('number')(input * 100, decimals) + '%';
        };
    }]);
var RDashModule = angular.module('RDash');
RDashModule.controller('TableCtrl', ['$scope', '$state', '$log', '$mdDialog', '$mdMedia', '$rootScope', '$filter',
    function ($scope, $state, $log, $mdDialog, $mdMedia, $rootScope, $filter) {
        $scope.nav = {
            productName: 'dd',
            releaseVersion: '',
            subProductName: ''
        };
        //$scope.$on('updateProductName', function(event) {
        //  event.currentScope.navBar.productName = event.targetScope.productName;
        //});

        $scope.currentPage = 1;
        $scope.numPages = 5;
        $scope.pageSize = 5;
        $scope.pages = [];
        $scope.status = ' ';
        $scope.customFullscreen = $mdMedia('xs') || $mdMedia('sm');
        $scope.allData = null;
        $scope.allProduct = null;

        $scope.onSelectPage = function (page) {
            /*ProductService.query().then(function successCallback(response) {
             $scope.numPages = Math.ceil(response.data.length/$scope.pageSize);
             $scope.products = response.data.slice((page - 1)* $scope.pageSize, (page - 1)* $scope.pageSize + $scope.pageSize);
             }, function errorCallback(response) {
             // TODO: report error
             });*/
            $scope.currentPage = page;
            $scope.numPages = Math.ceil($scope.allData.length / $scope.pageSize);
            $scope.products = $scope.allData.slice((page - 1) * $scope.pageSize, (page - 1) * $scope.pageSize + $scope.pageSize);
        };

        $scope.sortType = 'id';
        $scope.sortReverse = false;
        $scope.searchProduct = {name: ''};
        $scope.filteredItems = null;

        $scope.printState = function () {
            console.log($state.current == 'tables');
        };

        $scope.gotoDashbarod = function () {
            $state.go('index');
        };

        var searchMatch = function (haystack, needle) {
            if (!needle) {
                return true;
            }
            var haystackString;

            if (typeof(haystack) !== "string") {
                haystackString = toString(haystack);
            } else {
                haystackString = haystack;
            }
            return haystackString.toLowerCase().indexOf(needle.toLowerCase()) !== -1;
        };

        $scope.search = function () {
            $scope.filteredItems = $filter('filter')($scope.allProduct, function (item) {
                for (var attr in item) {
                    if (searchMatch(item[attr], $scope.searchProduct.name))
                        return true;
                }
                return false;
            });
            $scope.currentPage = 1;
            $scope.groupToPages();
        };

        $scope.groupToPages = function () {
            $scope.allData = $scope.filteredItems;
            $scope.numPages = Math.ceil($scope.allData.length / $scope.pageSize);
            $scope.products = $scope.filteredItems.slice(0, $scope.pageSize);
        };

        $scope.addProduct = function (ev) {
            // Appending dialog to document.body to cover sidenav in docs app
            // Modal dialogs should fully cover application
            // to prevent interaction outside of dialog
            var useFullScreen = ($mdMedia('sm') || $mdMedia('xs')) && $scope.customFullscreen;

            $mdDialog.show({
                controller: DialogController,
                templateUrl: 'dialog1.tmpl.html',
                parent: angular.element(document.getElementById("popupContainer")),
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: useFullScreen
            })
                .then(function () {
                    //$scope.status = 'saved';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });

            $scope.$watch(function () {
                return $mdMedia('xs') || $mdMedia('sm');
            }, function (wantsFullScreen) {
                $scope.customFullscreen = (wantsFullScreen === true);
            });
        };

        $scope.delete = function (ev, id, p) {
            // Appending dialog to document.body to cover sidenav in docs app
            var confirm = $mdDialog.confirm()
                .title('Warning')
                .textContent('Would you like to delete "' + p.name + '"?')
                .ariaLabel('Lucky day')
                .targetEvent(ev)
                .ok('Please do it!')
                .cancel('Cancel');

            $mdDialog.show(confirm).then(function () {
                var index = $scope.allData.indexOf(p);
                if (index > -1) $scope.allData.splice(index, 1);
                $scope.products = $scope.allData.slice(($scope.currentPage - 1) * $scope.pageSize, ($scope.currentPage - 1) * $scope.pageSize + $scope.pageSize);
                $scope.status = 'Delete!'
            }, function () {
                $scope.status = 'Cancel.';
            });
        };

        $scope.activeProduct = {
            name: null,
            cmt: null,
            user_id: null
        };
        $scope.edit = function (ev, product) {
            var useFullScreen = ($mdMedia('sm') || $mdMedia('xs')) && $scope.customFullscreen;
            $scope.activeProduct = product;
            $mdDialog.show({
                controller: UpdateDialogController,
                templateUrl: 'updatedialog.tmpl.html',
                parent: angular.element(document.getElementById("popupContainer")),
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: useFullScreen,
                scope: $scope,
                preserveScope: true
            })
                .then(function () {
                    //$scope.status = 'saved';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });

            $scope.$watch(function () {
                return $mdMedia('xs') || $mdMedia('sm');
            }, function (wantsFullScreen) {
                $scope.customFullscreen = (wantsFullScreen === true);
            });
        };

        $scope.addRelease = function (ev, id) {
            var useFullScreen = ($mdMedia('sm') || $mdMedia('xs')) && $scope.customFullscreen;
            $scope.addReleaseProID = id;
            $mdDialog.show({
                controller: AddReleaseDialogController,
                templateUrl: 'addrelease.tmpl.html',
                parent: angular.element(document.getElementById("popupContainer")),
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: useFullScreen,
                scope: $scope,
                preserveScope: true
            })
                .then(function () {
                    //$scope.status = 'saved';
                }, function () {
                    $scope.status = 'You cancelled the dialog.';
                });

            $scope.$watch(function () {
                return $mdMedia('xs') || $mdMedia('sm');
            }, function (wantsFullScreen) {
                $scope.customFullscreen = (wantsFullScreen === true);
            });

        };
    }]
)
    .controller('UpdateDialogController', ['$scope', '$state', '$mdDialog', 'ProductService', DialogController])
    .controller('UpdateDialogController', ['$scope', '$state', '$mdDialog', 'ProductService', UpdateDialogController])
    .controller('AddReleaseDialogController', ['$scope', '$state', '$mdDialog', AddReleaseDialogController]);

function DialogController($scope, $state, $mdDialog, ProductService) {
    $scope.fields = {
        name: null,
        cmt: null,
        user_id: null
    };
    $scope.hide = function () {
        $mdDialog.hide();
    };

    $scope.cancel = function () {
        $mdDialog.cancel();
    };

    $scope.save = function () {
        ProductService.create($scope.fields).then(function successCallback(response) {
            $mdDialog.hide();
            $state.go($state.current, {}, {reload: true});
            //$state.go('products.show.releases.show.subs.index', {productId: response.data.id, releaseVersion: 'v2.3.1'});
            // TODO: clear $scope.fields;
        }, function errorCallback(response) {
            // TODO: report error
        });

    };
}

function UpdateDialogController($scope, $state, $mdDialog, ProductService) {
    $scope.hide = function () {
        $mdDialog.hide();
    };

    $scope.cancel = function () {
        $mdDialog.cancel();
    };

    $scope.save = function () {
        $mdDialog.hide();
    };
}

function AddReleaseDialogController($scope, $state, $mdDialog) {
    $scope.activeRelease = {
        product_id: $scope.addReleaseProID,
        version: null,
        cmt: null
    };
    $scope.hide = function () {
        $mdDialog.hide();
    };

    $scope.cancel = function () {
        $mdDialog.cancel();
    };

    $scope.save = function () {
    };
}

RDashModule.directive('paging', function () {
    return {
        restrict: 'EA',
        template: '',
        replace: true,
        link: function ($scope, $element, $attrs) {
            $scope.$watch(function () {
                var newValue = $scope.currentPage + ' ' + $scope.numPages;
                return newValue;
            }, function () {
                $scope.pages = [];
                //if ($scope.currentPage > $scope.numPages) {
                //$scope.selectPage($scope.numPages);
                //}
                $scope.pagesLength = 9;
                if ($scope.numPages <= $scope.pagesLength) {
                    for (var i = 1; i <= $scope.numPages; i++) {
                        $scope.pages.push(i);
                    }
                } else {
                    var offset = ($scope.pagesLength - 1) / 2;
                    if ($scope.currentPage <= offset) {
                        for (var i = 1; i <= offset + 1; i++) {
                            $scope.pages.push(i);
                        }
                        $scope.pages.push('...');
                        $scope.pages.push($scope.numPages);
                    } else if ($scope.currentPage > $scope.numPages - offset) {
                        $scope.pages.push(1);
                        $scope.pages.push('...');
                        for (var i = offset + 1; i >= 1; i--) {
                            $scope.pages.push($scope.numPages - i);
                        }
                        $scope.pages.push($scope.numPages);
                    } else {
                        $scope.pages.push(1);
                        $scope.pages.push('...');
                        for (var i = offset / 2; i >= 1; i--) {
                            $scope.pages.push($scope.currentPage - i);
                        }
                        $scope.pages.push($scope.currentPage);
                        for (var i = 1; i <= offset / 2; i++) {
                            $scope.pages.push($scope.currentPage + i);
                        }
                        $scope.pages.push('...');
                        $scope.pages.push($scope.numPages);
                    }
                }

            });
            $scope.isActive = function (page) {
                return $scope.currentPage === page;
            };
            $scope.noPrevious = function () {
                return $scope.currentPage == 1;
            };
            $scope.noNext = function () {
                return $scope.currentPage == $scope.numPages;
            };
            $scope.selectPage = function (page) {
                if (page == '...') {
                    return;
                } else {
                    if (!$scope.isActive(page)) {
                        $scope.currentPage = page;
                        $scope.onSelectPage(page);
                    }
                }

            };
            $scope.selectPrevious = function () {
                if (!$scope.noPrevious()) {
                    $scope.selectPage($scope.currentPage - 1);
                }
            };
            $scope.selectNext = function () {
                if (!$scope.noNext()) {
                    $scope.selectPage($scope.currentPage + 1);
                }
            };
        }
    };
});
angular.module('RDash')
    .controller('TableDetailCtrl'), ['$scope', '$stateParams', '$state', function ($scope, $stateParams, $state) {

    var id = $stateParams.tableId;
    $scope.id = id;
    console.log(id);
    $scope.name = 'foo';
    $state.go('tables.detail.grid');
    // $scope.items = [1, 2];
}];

angular.module('run', [
    'workflow.ctrl'
]);
angular.module('workflow.ctrl', [
    'demo.service',
])
    .controller('WorkflowCtrl', ['$scope', '$state', '$stateParams', '$log', '$filter', 'DemoService', WorkflowCtrl])
    .controller('WorkflowLogCtrl', ['$scope', '$state', '$stateParams', '$log', '$filter', 'DemoService', WorkflowLogCtrl]);

function WorkflowCtrl($scope, $state, $stateParams, $log, $filter, DemoService) {
    $scope.workflows = [];

    DemoService.getWorkflows().then(function successCallback(response) {
        $scope.workflows = response.data;
        console.log($scope.workflows)
    }, function errorCallback(response) {
        // TODO: report error
    });

    $scope.run = function (wf_id) {
        alert('Started Workflow: ' + wf_id);
    };
}

function WorkflowLogCtrl($scope, $state, $stateParams, $log, $filter) {
    $scope.workflow = $stateParams['id'];

    $scope.curr_date = new Date();
    $scope.text = "INFO  Started workflow: " + $scope.workflow;
}


function ResourceCtrl($scope, $state, $stateParams, $log, $filter, DemoService) {
    $scope.workflows = [];

    DemoService.getWorkflows().then(function successCallback(response) {
        $scope.workflows = response.data;
        console.log($scope.workflows)
    }, function errorCallback(response) {
        // TODO: report error
    });

    $scope.run = function (wf_id) {
        alert('Started Workflow: ' + wf_id);
    };
}